//
//  MessagesViewController.swift
//  BoldyGiffing MessagesExtension
//
//  Created by Aaron Williams on 2017-06-30.
//  Copyright Â© 2017 SweetieApps. All rights reserved.
//

import UIKit
import Messages
import Kingfisher

class MessagesViewController: MSMessagesAppViewController, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    @IBOutlet weak var thumbnailCollectionView: UICollectionView!
    @IBOutlet weak var flowLayout: UICollectionViewFlowLayout!

    private let dataSource = CollectionViewDataSource()
    private let cache = NSCache<NSString, AnyObject>()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        KingfisherManager.shared.cache.pathExtension = "gif"
        
        thumbnailCollectionView.delegate = self
        thumbnailCollectionView.dataSource = dataSource
        thumbnailCollectionView.prefetchDataSource = dataSource
        
        thumbnailCollectionView.register(ThumbnailCell.self, forCellWithReuseIdentifier: thumbmailCellIdentifier)
        flowLayout.estimatedItemSize = CGSize(width: 100.0, height: 90.0)
        
        NotificationCenter.default.addObserver(self.thubmnailCollectionView, selector: #selector(UICollectionView.reloadData), name: dataSetUpdatedNotification, object: nil)
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.

        dataSource.fetchThumbnails()
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.

        NotificationCenter.default.removeObserver(self)
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    // MARK: - CollectionViewDelegate

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let cell = collectionView.cellForItem(at: indexPath) as? ThumbnailCell
        let gif = dataSource.dataSet[indexPath.item]
        
        KingfisherManager.shared.retrieveImage(with: gif.fullSizeURL, options: nil, progressBlock: { receivedSize, totalSize in
            // progress
            print(totalSize/receivedSize)
            cell?.set(loading: true)
        }) { [weak self] image, error, cacheType, url in
            guard
                error == nil else {
                    cell?.set(loading: false)
                    return
            }
            
            self?.insertGif(for: gif.fullSizeURL.cacheKey)
            cell?.set(loading: false)
        }
    }
        }
    }

    func insertGif(for cacheKey: String) {
        guard let conversation = activeConversation else { return }
        
        let cachePath = ImageCache.default.cachePath(forKey: cacheKey)
        let url = URL(fileURLWithPath: cachePath)
        
        // Only insert the image once it is cached and reachable
        do {
            _ = try url.checkResourceIsReachable()
            conversation.insertAttachment(url, withAlternateFilename: nil, completionHandler: { [weak self] _ in
                self?.requestPresentationStyle(.compact)
            })
        }
        catch {
            print(error)
            self.insertGif(for: cacheKey)
        }
    }

    // MARK: - FlowLayoutDelegate
//    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
//        let numberOfItems: CGFloat = 3.0
//        let itemSpacing: CGFloat = 10.0
//        let availableWidth = view.bounds.width - itemSpacing * (numberOfItems + 1)
//        let width = availableWidth / numberOfItems
//
//        return CGSize(width: width, height: 70.0)
//    }
}
