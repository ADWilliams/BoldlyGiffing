//
//  MessagesViewControllerNEWViewController.swift
//  BoldyGiffing MessagesExtension
//
//  Created by Aaron Williams on 2022-04-01.
//  Copyright Â© 2022 SweetieApps. All rights reserved.
//

import UIKit
import Messages
import SwiftUI
import SDWebImage

class MessagesViewControllerNEW: MSMessagesAppViewController {
    
    @IBOutlet weak var container: UIView!

    override func viewDidLoad() {
        super.viewDidLoad()
        
        NotificationCenter.default.addObserver(forName: Notification.Name("insertGif"), object: nil, queue: nil) { notification in
            if let key = notification.userInfo?["key"] as? String {
                self.insertGif(for: key)
            }
        }
    }
    
    
    private func insertGif(for cacheKey: String) {
        guard let conversation = activeConversation else { return }
        let cachePath =  SDImageCache.shared.cachePath(forKey: cacheKey)
        let url = URL(fileURLWithPath: cachePath ?? "")
        
        let filename = url.lastPathComponent
        var tempUrl = URL(fileURLWithPath: NSTemporaryDirectory(), isDirectory: true)
        tempUrl.appendPathComponent(filename)
        // Only insert the image once it is cached and reachable
        do {
            let exists = try url.checkResourceIsReachable()
            print("exists: \(exists)")
            try FileManager.default.copyItem(at: url, to: tempUrl)
            
            _ = try tempUrl.checkResourceIsReachable()
            conversation.insertAttachment(tempUrl, withAlternateFilename: nil, completionHandler: { [weak self] _ in
                self?.requestPresentationStyle(.compact)
            })
        }
        catch {
            print(error)
//            self.insertGif(for: cacheKey)
        }
    }
}

extension MessagesViewControllerNEW {
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.

//        dataSource.fetchRandomThumbnails()
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.

        NotificationCenter.default.removeObserver(self)
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.

        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}

